buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}

plugins {
    id "fabric-loom" version "0.2.6-SNAPSHOT"
    id "maven-publish"
    id "io.freefair.lombok" version "4.1.6"
    id "com.matthewprenger.cursegradle" version "1.0.9"
}

//set it so it has to be java 8
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def build_number = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : "CUSTOM"

group = package_group
archivesBaseName = mod_name
version = "${mc_version}-${major_version}.${minor_version}.${patch_number}-${build_number}"

// Ignore this error. It'll work just fine when building.
import org.ajoberstar.grgit.*

ext.repo = Grgit.open(project.file('.'))
def gitHash = 'unknown'

if (file('.git').exists())
    gitHash = repo.log().find().abbreviatedId

repositories {
	mavenCentral()
	maven {
		name = "FabricMC"
		url = "https://maven.fabricmc.net"
	}
	maven {
		name = "Cotton"
		url = "http://server.bbkr.space:8081/artifactory/libs-release/"
	}
	maven { url "https://jitpack.io" }
}

minecraft {
    runDir = "run"
}

dependencies {
	minecraft "com.mojang:minecraft:${project.mc_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	compileOnly "com.google.code.findbugs:jsr305:3.0.2"

	// MC libraries
	modImplementation "io.github.cottonmc:LibGui:${project.libgui_version}"
	include "io.github.cottonmc:LibGui:${project.libgui_version}"
	modImplementation ("com.github.Siphalor:nbt-crafting:${project.nbtc_version}") { transitive = false }
	include ("com.github.Siphalor:nbt-crafting:${project.nbtc_version}") { transitive = false }
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

jar {
    archiveClassifier.set('')
    manifest.mainAttributes(
        "Built-By": System.getProperty('user.name'),
        "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
        "Implementation-Title": project.name,
        "Implementation-Version": project.version,
        "Git-Hash": gitHash
    )
}

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
	from sourceSets.main.allSource
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
    repositories {
        if (project.hasProperty('maven_repo')) {
            maven { url maven_repo }
        } else {
            mavenLocal()
        }
    }
}

static String getChangelogText() {
    def changelogFile = new File('changelog.txt')
    String str = ''
    String separator = '---'
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (lineCount < 3) {
            lineCount++
            if (it.startsWith(separator)) {return}
        }
        if (!it.startsWith(separator)) {
            str += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
            return
        }
        done = true // once we go past the first version block, parse no more
    }
    return str
}

def curseRelations = {
    optionalLibrary 'roughly-enough-items'
}

curseforge {
    if (project.hasProperty('curse_key_iron_backpacks'))
        apiKey = project.curse_key_iron_backpacks

    project {
        id = "${curse_id}"
        changelog = getChangelogText()
        releaseType = "${release_type}"
        mainArtifact(remapJar)

        relations curseRelations
    }
    options {
        forgeGradleIntegration = false
    }
}


//Increment patch number
//TODO: Fix autoincrement happening even when not running remapJar
/* task incrementVersionNumber {
    dependsOn remapJar
    ant.replace(file: "gradle.properties", token: "patch_number=${patch_number}", value: "patch_number=${patch_number.toString().toInteger() + 1}")
} */

//Adds a new changelog segment
/*task makeNewChangelog {
    def changelogFile = new File('changelog.txt')
    String newText = '------------------------------------------------------\n' +
            'Version '+mc_version+" - "+major_version+"."+minor_version+"."+(patch_number.toString().toInteger() + 1)+"\n" +
            '------------------------------------------------------\n' +
            'Additions\n' +
            '- None\n' +
            '\n' +
            'Changes\n' +
            '- None\n' +
            '\n' +
            'Bug Fixes\n' +
            '- None\n'
    String oldText = changelogFile.getText()
    changelogFile.setText(newText + oldText);
}*/

//Note: commit history requires [ci jenkins-build] to build via jenkins

//enforce correct order
tasks.build.mustRunAfter clean
//tasks.makeNewChangelog.mustRunAfter incrementVersionNumber

//curseforge uses these tasks
tasks.curseforge.dependsOn clean, remapJar